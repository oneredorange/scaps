projects {
  // unfortunately 0.6.2 is the latest release of scala-refactoring
  scala-refactoring {
  	url = "http://central.maven.org/maven2/org/scala-refactoring/org.scala-refactoring.library_2.11/0.6.2/org.scala-refactoring.library_2.11-0.6.2-sources.jar"
  	dependencies = [
  	  ${scala-library}
  	  ${scala-reflect}
  	  ${scala-compiler}
  	  ${scala-swing}
  	  ${scala-refactoring}
  	  ${junit}
  	]
  }
}

queries {
  "expand: (Selection, Position) => Selection" = [
    "scala.tools.refactoring.common.Selections#Selection#expandTo: <memberAccess>[scala.tools.refactoring.common.Selections#Selection, <methodInvocation1>[scala.reflect.internal.util.Position, scala.Option[scala.tools.refactoring.common.Selections#Selection]]]"
  ]
  "distance: (Trees#Tree, Position) => _" = [
    "scala.tools.refactoring.common.PimpedTrees#TreeMethodsForPositions#distanceTo: <memberAccess>[scala.tools.refactoring.common.PimpedTrees#TreeMethodsForPositions, <methodInvocation1>[scala.reflect.internal.util.Position, scala.Int]]"
  ]
  "children: Trees#Tree => List[Trees#Tree]" = [
    "scala.tools.refactoring.common.PimpedTrees#children: <memberAccess>[scala.tools.refactoring.common.PimpedTrees, scala.Function1[scala.reflect.internal.Trees#Tree, scala.collection.immutable.List[scala.reflect.internal.Trees#Tree]]]"
  ]
  "unapply: Trees#Apply => Option" = [
    "scala.tools.refactoring.common.PimpedTrees#ApplyExtractor.unapply: <methodInvocation1>[scala.reflect.internal.Trees#Apply, scala.Option[scala.Tuple2[scala.reflect.internal.Trees#Tree, scala.collection.immutable.List[scala.reflect.internal.Trees#Tree]]]]"
  ]
  "unapply: Trees#Block => Option" = [
    "scala.tools.refactoring.common.PimpedTrees#BlockExtractor.unapply: <methodInvocation1>[scala.reflect.internal.Trees#Block, scala.Some[scala.collection.immutable.List[scala.reflect.internal.Trees#Tree]]]"
  ]
  "`raw source code`: String => Trees#Tree" = [
    "scala.tools.refactoring.common.PimpedTrees#PlainText.Raw.apply: <methodInvocation1>[java.lang.String, scala.tools.refactoring.common.PimpedTrees#PlainText.Raw]"
  ]
  "`unit unapply`: Trees#Tree => Option" = [
    "scala.tools.refactoring.common.TreeExtractors#UnitLit.unapply: <methodInvocation1>[scala.reflect.internal.Trees#Tree, scala.Boolean]"
  ]
  "memoize: (A => B) => (A => B)" = [
    "scala.tools.refactoring.util.Memoized.on[X, Y, Z]: <methodInvocation1>[scala.Function1[X, Y], <methodInvocation1>[scala.Function1[X, Z], scala.Function1[X, Z]]]"
  ]
}