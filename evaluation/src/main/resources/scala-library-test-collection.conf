projects {
  scala-library {
    url = "http://central.maven.org/maven2/org/scala-lang/scala-library/2.11.5/scala-library-2.11.5-sources.jar"
    dependencies = [
  	  ${scala-library}
  	]
  }
}

queries {
  "String => Double" = [
    "scala.collection.immutable.StringOps.toDouble: <memberAccess>[scala.collection.immutable.StringOps, scala.Double]"
    "scala.collection.immutable.WrappedString.toDouble: <memberAccess>[scala.collection.immutable.WrappedString, scala.Double]"
  ]
  "max: Int" = [
  	"scala.Int.MaxValue: scala.Int"
  ]
  "max: (Int, Int) => Int" = [
    "scala.math.max: <methodInvocation2>[scala.Int, scala.Int, scala.Int]"
    "scala.runtime.RichInt.max: <memberAccess>[scala.runtime.RichInt, <methodInvocation1>[scala.Int, scala.Int]]"
    "scala.math.Ordering.Int.max: <methodInvocation2>[scala.Int, scala.Int, scala.Int]"
  ]
  "Ordering[Char]" = [
    "scala.math.Numeric.CharIsIntegral: <refinement3>[java.lang.Object, scala.math.Numeric.CharIsIntegral, scala.math.Ordering.CharOrdering]"
    "scala.math.Ordering.Char: <refinement2>[java.lang.Object, scala.math.Ordering.CharOrdering]"
    "scala.math.Numeric.CharIsIntegral.reverse: scala.math.Ordering[scala.Char]"
    "scala.math.Ordering.Char.reverse: scala.math.Ordering[scala.Char]"
  ]
  "Ordering[A] => (B => A) => Ordering[B]" = [
  	"scala.math.Ordering.on[T, U]: <memberAccess>[scala.math.Ordering[T], <methodInvocation1>[scala.Function1[U, T], scala.math.Ordering[U]]]"
  	"scala.math.Ordering.by[T, S]: <methodInvocation1>[scala.Function1[T, S], <methodInvocation1>[scala.math.Ordering[S], scala.math.Ordering[T]]]"
  ]
  "Ordering[A] => Ordering[Option[A]]" = [
    "scala.math.Ordering.Option[T]: <methodInvocation1>[scala.math.Ordering[T], scala.math.Ordering[scala.Option[T]]]"
  ]
  "List => java.util.List" = [
    "scala.collection.JavaConversions.seqAsJavaList[A]: <methodInvocation1>[scala.collection.Seq[A], java.util.List[A]]"
    "scala.collection.convert.WrapAsJava.seqAsJavaList[A]: <methodInvocation1>[scala.collection.Seq[A], java.util.List[A]]"
  ]
  "java.util.List => collection.Iterable" = [
    "scala.collection.JavaConversions.asScalaBuffer[A]: <methodInvocation1>[java.util.List[A], scala.collection.mutable.Buffer[A]]"
    "scala.collection.convert.WrapAsScala.asScalaBuffer[A]: <methodInvocation1>[java.util.List[A], scala.collection.mutable.Buffer[A]]"
  ]
  "(Int, Int) => Range" = [
    "scala.collection.immutable.Range.apply: <methodInvocation2>[scala.Int, scala.Int, scala.collection.immutable.Range]"
    "scala.runtime.RichInt.until: <memberAccess>[scala.runtime.RichInt, <methodInvocation1>[scala.Int, scala.collection.immutable.Range]]"
    "scala.collection.immutable.Range.inclusive: <methodInvocation2>[scala.Int, scala.Int, scala.collection.immutable.Range.Inclusive]"
    "scala.runtime.RichInt.to: <memberAccess>[scala.runtime.RichInt, <methodInvocation1>[scala.Int, scala.collection.immutable.Range.Inclusive]]"
  ]
  "exclusive: (Int, Int) => Range" = [
    "scala.collection.immutable.Range.apply: <methodInvocation2>[scala.Int, scala.Int, scala.collection.immutable.Range]"
  ]
  "step: (Range, Int) => Range" = [
    "scala.collection.immutable.Range.by: <memberAccess>[scala.collection.immutable.Range, <methodInvocation1>[scala.Int, scala.collection.immutable.Range]]"
  ]
  "(List[Int], String) => String" = [
    "scala.collection.immutable.List.mkString[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[java.lang.String, java.lang.String]]"
  ]
  "(List[A], String) => String" = [
    "scala.collection.immutable.List.mkString[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[java.lang.String, java.lang.String]]"
  ]
  "(List[Char], String, String, String) => String" = [
    "scala.collection.immutable.List.mkString[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation3>[java.lang.String, java.lang.String, java.lang.String, java.lang.String]]"
  ]
  "(List[A], String, String, String) => String" = [
    "scala.collection.immutable.List.mkString[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation3>[java.lang.String, java.lang.String, java.lang.String, java.lang.String]]"
  ]
  "(List[A], Int) => A" = [
  	"scala.collection.immutable.List.apply[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, A]]"
  ]
  "List[A] => (A => Boolean) => List[A]" = [
    "scala.collection.immutable.List.filterNot[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.collection.immutable.List[A]]]"
    "scala.collection.immutable.List.filter[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.collection.immutable.List[A]]]"
    "scala.collection.immutable.List.withFilter[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.collection.generic.FilterMonadic[A, scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.dropWhile[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.collection.immutable.List[A]]]"
    "scala.collection.immutable.List.takeWhile[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.collection.immutable.List[A]]]"
  ]
  "List[A] => Option[A]" = [
    "scala.collection.immutable.List.lastOption[A]: <memberAccess>[scala.collection.immutable.List[A], scala.Option[A]]"
    "scala.collection.immutable.List.headOption[A]: <memberAccess>[scala.collection.immutable.List[A], scala.Option[A]]"
  ]
  "Option[Option[Char]] => Option[Char]" = [
    "scala.Option.flatten[A, B]: <memberAccess>[scala.Option[A], <methodInvocation1>[scala.Predef.<:<[A, scala.Option[B]], scala.Option[B]]]"
  ]
  "Option[Option[A]] => Option[A]" = [
    "scala.Option.flatten[A, B]: <memberAccess>[scala.Option[A], <methodInvocation1>[scala.Predef.<:<[A, scala.Option[B]], scala.Option[B]]]"
  ]
  "List[List[A]] => List[A]" = [
    "scala.collection.immutable.List.flatten[A, B]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.collection.GenTraversableOnce[B]], scala.collection.immutable.List[B]]]"
  ]
  "List[A] => (A => List[B]) => List[B]" = [
    "scala.collection.immutable.List.flatMap[A, B]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.collection.GenTraversableOnce[B]], scala.collection.immutable.List[B]]]"
    "scala.collection.immutable.List.flatten[A, B]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.collection.GenTraversableOnce[B]], scala.collection.immutable.List[B]]]"
  ]
  "List[A] => (A => Option[B]) => List[B]" = [
    "scala.collection.immutable.List.flatMap[A, B]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.collection.GenTraversableOnce[B]], scala.collection.immutable.List[B]]]"
    "scala.collection.immutable.List.flatten[A, B]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.collection.GenTraversableOnce[B]], scala.collection.immutable.List[B]]]"
  ]
  "List[Future[Float]] => Future[List[Float]]" = [
    "scala.concurrent.Future.sequence[A, M <: scala.collection.TraversableOnce[X]]: <methodInvocation1>[M[scala.concurrent.Future[A]], <methodInvocation2>[scala.collection.generic.CanBuildFrom[M[scala.concurrent.Future[A]], A, M[A]], scala.concurrent.ExecutionContext, scala.concurrent.Future[M[A]]]]"
  ]
  "List[Future[A]] => Future[List[A]]" = [
    "scala.concurrent.Future.sequence[A, M <: scala.collection.TraversableOnce[X]]: <methodInvocation1>[M[scala.concurrent.Future[A]], <methodInvocation2>[scala.collection.generic.CanBuildFrom[M[scala.concurrent.Future[A]], A, M[A]], scala.concurrent.ExecutionContext, scala.concurrent.Future[M[A]]]]"
  ]
  "await: Future[T] => _" = [
    "scala.concurrent.Await.result[T]: <methodInvocation2>[scala.concurrent.Awaitable[T], scala.concurrent.duration.Duration, T]"
    "scala.concurrent.Await.ready[T]: <methodInvocation2>[scala.concurrent.Awaitable[T], scala.concurrent.duration.Duration, scala.concurrent.Awaitable]"
  ]
  "Future[T] => T" = [
    "scala.concurrent.Await.result[T]: <methodInvocation2>[scala.concurrent.Awaitable[T], scala.concurrent.duration.Duration, T]"
    "scala.concurrent.Future.result[T]: <memberAccess>[scala.concurrent.Future[T], <methodInvocation1>[scala.concurrent.duration.Duration, <methodInvocation1>[scala.concurrent.CanAwait, T]]]"
  ]
  "ExecutionContext" = [
    "scala.concurrent.ExecutionContext.Implicits.global: scala.concurrent.ExecutionContextExecutor"
  ]
  "sort: Array[Float] => _" = [
    "scala.util.Sorting.quickSort: <methodInvocation1>[scala.Array[scala.Float], scala.Unit]"
    "scala.util.Sorting.quickSort[K]: <methodInvocation1>[scala.Array[K], <methodInvocation1>[scala.math.Ordering[K], scala.Unit]]"
    "scala.util.Sorting.stableSort[K]: <methodInvocation1>[scala.Array[K], <methodInvocation2>[scala.reflect.ClassTag[K], scala.math.Ordering[K], scala.Unit]]"
  ]
  "sort: (Array[A], Ordering[A]) => _" = [
    "scala.util.Sorting.quickSort[K]: <methodInvocation1>[scala.Array[K], <methodInvocation1>[scala.math.Ordering[K], scala.Unit]]"
    "scala.util.Sorting.stableSort[K]: <methodInvocation1>[scala.Array[K], <methodInvocation2>[scala.reflect.ClassTag[K], scala.math.Ordering[K], scala.Unit]]"
  ]
  "sort: Array[A] => _" = [
    "scala.util.Sorting.quickSort[K]: <methodInvocation1>[scala.Array[K], <methodInvocation1>[scala.math.Ordering[K], scala.Unit]]"
    "scala.util.Sorting.stableSort[K]: <methodInvocation1>[scala.Array[K], <methodInvocation2>[scala.reflect.ClassTag[K], scala.math.Ordering[K], scala.Unit]]"
    "scala.util.Sorting.stableSort[K]: <methodInvocation2>[scala.Array[K], scala.Function2[K, K, scala.Boolean], <methodInvocation1>[scala.reflect.ClassTag[K], scala.Unit]]"
  ]
  "List[Char] => (List[Char], List[Char])" = [
    "scala.collection.immutable.List.splitAt[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, scala.Tuple2[scala.collection.immutable.List[A], scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.span[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.Tuple2[scala.collection.immutable.List[A], scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.partition[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.Tuple2[scala.collection.immutable.List[A], scala.collection.immutable.List[A]]]]"
  ]
  "List[A] => (List[A], List[A])" = [
    "scala.collection.immutable.List.splitAt[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, scala.Tuple2[scala.collection.immutable.List[A], scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.span[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.Tuple2[scala.collection.immutable.List[A], scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.partition[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Boolean], scala.Tuple2[scala.collection.immutable.List[A], scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.unzip[A, A1, A2]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Function1[A, scala.Tuple2[A1, A2]], scala.Tuple2[scala.collection.immutable.List[A1], scala.collection.immutable.List[A2]]]]"
  ]
  "List[A] => Int => TraversableOnce[List[A]]" = [
    "scala.collection.immutable.List.combinations[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, scala.collection.Iterator[scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.sliding[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, scala.collection.Iterator[scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.grouped[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, scala.collection.Iterator[scala.collection.immutable.List[A]]]]"
  ]
  "group: List[A] => Int => List[List[A]]" = [
    "scala.collection.immutable.List.sliding[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, scala.collection.Iterator[scala.collection.immutable.List[A]]]]"
    "scala.collection.immutable.List.grouped[A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Int, scala.collection.Iterator[scala.collection.immutable.List[A]]]]"
  ]
  "shuffle: List[Float] => List[Float]" = [
    "scala.util.Random.shuffle[T, CC <: scala.collection.TraversableOnce[X]]: <methodInvocation1>[CC[T], <methodInvocation1>[scala.collection.generic.CanBuildFrom[CC[T], T, CC[T]], CC[T]]]"
    "scala.util.Random.shuffle[T, CC <: scala.collection.TraversableOnce[X]]: <memberAccess>[scala.util.Random, <methodInvocation1>[CC[T], <methodInvocation1>[scala.collection.generic.CanBuildFrom[CC[T], T, CC[T]], CC[T]]]]"
  ]
  "shuffle: List[A] => List[A]" = [
    "scala.util.Random.shuffle[T, CC <: scala.collection.TraversableOnce[X]]: <methodInvocation1>[CC[T], <methodInvocation1>[scala.collection.generic.CanBuildFrom[CC[T], T, CC[T]], CC[T]]]"
    "scala.util.Random.shuffle[T, CC <: scala.collection.TraversableOnce[X]]: <memberAccess>[scala.util.Random, <methodInvocation1>[CC[T], <methodInvocation1>[scala.collection.generic.CanBuildFrom[CC[T], T, CC[T]], CC[T]]]]"
  ]
  "(collection.Seq[A], collection.Seq[B]) => collection.Seq[(A, B)]" = [
    "scala.collection.Seq.zip[A, B]: <memberAccess>[scala.collection.Seq[A], <methodInvocation1>[scala.collection.GenIterable[B], scala.collection.Seq[scala.Tuple2[A, B]]]]"
    "scala.collection.Seq.zipAll[A, B]: <memberAccess>[scala.collection.Seq[A], <methodInvocation3>[scala.collection.Iterable[B], A, B, scala.collection.Seq[scala.Tuple2[A, B]]]]"
    "scala.runtime.Tuple2Zipped.Ops.zipped[T1, T2, El1, Repr1, El2, Repr2]: <memberAccess>[scala.runtime.Tuple2Zipped.Ops[T1, T2], <methodInvocation2>[scala.Function1[T1, scala.collection.TraversableLike[El1, Repr1]], scala.Function1[T2, scala.collection.IterableLike[El2, Repr2]], scala.runtime.Tuple2Zipped[El1, Repr1, El2, Repr2]]]"
  	"scala.runtime.Tuple2Zipped.Ops.invert[T1, T2, El1, CC1 <: scala.collection.TraversableOnce[X], El2, CC2 <: scala.collection.TraversableOnce[X], That]: <memberAccess>[scala.runtime.Tuple2Zipped.Ops[T1, T2], <methodInvocation3>[scala.Predef.<:<[T1, CC1[El1]], scala.Predef.<:<[T2, CC2[El2]], scala.collection.generic.CanBuildFrom[CC1[scala.Any], scala.Tuple2[El1, El2], That], That]]"
  ]
  "random: Double" = [
    "scala.util.Random.nextDouble: <methodInvocation0>[scala.Double]"
    "scala.util.Random.nextGaussian: <methodInvocation0>[scala.Double]"
    "scala.math.random: scala.Double"
  ]
  "(Vector[A], Int) => Option[A]" = [
    "scala.collection.immutable.Vector.lift[A]: <memberAccess>[scala.collection.immutable.Vector[A], scala.Function1[scala.Int, scala.Option[A]]]"
  ]
  "List[A] => B => (B => A => B) => B" = [
    "scala.collection.immutable.List.foldLeft[A, B]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[B, <methodInvocation1>[scala.Function2[B, A, B], B]]]"
    "scala.collection.immutable.List.foldRight[A, B]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[B, <methodInvocation1>[scala.Function2[A, B, B], B]]]"
    "scala.collection.immutable.List.fold[A, A1 >: A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[A1, <methodInvocation1>[scala.Function2[A1, A1, A1], A1]]]"
  ]
  "List[(A, B)] => immutable.Map[A, B]" = [
    "scala.collection.immutable.Map.apply[A, B]: <methodInvocation1>[scala.<repeated>[scala.Tuple2[A, B]], scala.collection.immutable.Map[A, B]]"
    "scala.collection.immutable.List.toMap[A, T, U]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.Predef.<:<[A, scala.Tuple2[T, U]], scala.collection.immutable.Map[T, U]]]"
  ]
  "List[A] => A" = [
    "scala.collection.immutable.List.product[A]: <memberAccess>[scala.collection.immutable.List[A], A]"
    "scala.collection.immutable.List.min[A]: <memberAccess>[scala.collection.immutable.List[A], A]"
    "scala.collection.immutable.List.last[A]: <memberAccess>[scala.collection.immutable.List[A], A]"
    "scala.collection.immutable.List.sum[A]: <memberAccess>[scala.collection.immutable.List[A], A]"
    "scala.collection.immutable.List.head[A]: <memberAccess>[scala.collection.immutable.List[A], A]"
    "scala.collection.immutable.List.max[A]: <memberAccess>[scala.collection.immutable.List[A], A]"
  ]
  "A => List[A]" = [
    "scala.collection.immutable.List.apply[A]: <methodInvocation1>[scala.<repeated>[A], scala.collection.immutable.List[A]]"
    "scala.collection.immutable.Nil.::[B]: <methodInvocation1>[B, scala.collection.immutable.List[B]]"
  ]
  "remove: List[A] => A => List[A]" = [
    "scala.collection.immutable.List.diff[A, B >: A]: <memberAccess>[scala.collection.immutable.List[A], <methodInvocation1>[scala.collection.GenSeq[B], scala.collection.immutable.List[A]]]"
  ]
  "List[Future] => Future" = [
    "scala.concurrent.Future.firstCompletedOf[T]: <methodInvocation1>[scala.collection.TraversableOnce[scala.concurrent.Future[T]], <methodInvocation1>[scala.concurrent.ExecutionContext, scala.concurrent.Future[T]]]"
  ]
  "Stream[Int]" = [
    "scala.collection.immutable.Stream.from: <methodInvocation1>[scala.Int, scala.collection.immutable.Stream[scala.Int]]"
  ]
  "range: A => A => Vector[A]" = [
    "scala.collection.immutable.Vector.range[T]: <methodInvocation2>[T, T, <methodInvocation1>[scala.math.Integral[T], scala.collection.immutable.Vector[T]]]"
  ]
  "Either[A, Either[A, B]] => Either[A, B]" = [
    "scala.util.Either.joinRight[A, B, A1 >: A, B1 >: B, C]: <memberAccess>[scala.util.Either[A, B], <methodInvocation1>[scala.Predef.<:<[B1, scala.util.Either[A1, C]], scala.util.Either[A1, C]]]"
  ]
  "Either[A, B] => Either[B, A]" = [
    "scala.util.Either.swap[A, B]: <memberAccess>[scala.util.Either[A, B], <refinement3>[scala.Product, scala.Serializable, scala.util.Either[B, A]]]"
  ]
  "util.Try[A] => A => A" = [
    "scala.util.Try.getOrElse[T, U >: T]: <memberAccess>[scala.util.Try[T], <methodInvocation1>[<byname>[U], U]]"
  ]
  "nano: Int => Duration" = [
    "scala.concurrent.duration.package.DurationInt.nanos: <memberAccess>[scala.concurrent.duration.package.DurationInt, scala.concurrent.duration.FiniteDuration]"
    "scala.concurrent.duration.package.DurationInt.nano: <memberAccess>[scala.concurrent.duration.package.DurationInt, scala.concurrent.duration.FiniteDuration]"
    "scala.concurrent.duration.Duration.fromNanos: <methodInvocation1>[scala.Long, scala.concurrent.duration.FiniteDuration]"
    "scala.concurrent.duration.Duration.fromNanos: <methodInvocation1>[scala.Double, scala.concurrent.duration.Duration]"
  ]
}